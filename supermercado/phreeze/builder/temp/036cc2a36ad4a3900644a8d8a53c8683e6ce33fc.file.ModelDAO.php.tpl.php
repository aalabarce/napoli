<?php /* Smarty version Smarty-3.1.18, created on 2015-12-21 15:00:08
         compiled from "/var/www/html/phreeze/builder/code/phreeze.php/libs/Model/DAO/ModelDAO.php.tpl" */ ?>
<?php /*%%SmartyHeaderCode:104043681356783e2886f375-94801531%%*/if(!defined('SMARTY_DIR')) exit('no direct access allowed');
$_valid = $_smarty_tpl->decodeProperties(array (
  'file_dependency' => 
  array (
    '036cc2a36ad4a3900644a8d8a53c8683e6ce33fc' => 
    array (
      0 => '/var/www/html/phreeze/builder/code/phreeze.php/libs/Model/DAO/ModelDAO.php.tpl',
      1 => 1445574211,
      2 => 'file',
    ),
  ),
  'nocache_hash' => '104043681356783e2886f375-94801531',
  'function' => 
  array (
  ),
  'variables' => 
  array (
    'connection' => 0,
    'singular' => 0,
    'table' => 0,
    'column' => 0,
    'set' => 0,
    'constraint' => 0,
  ),
  'has_nocache_code' => false,
  'version' => 'Smarty-3.1.18',
  'unifunc' => 'content_56783e2890a680_82175663',
),false); /*/%%SmartyHeaderCode%%*/?>
<?php if ($_valid && !is_callable('content_56783e2890a680_82175663')) {function content_56783e2890a680_82175663($_smarty_tpl) {?><?php if (!is_callable('smarty_modifier_studlycaps')) include '/var/www/html/phreeze/libs/smarty/plugins/modifier.studlycaps.php';
?><<?php ?>?php
/** @package <?php echo smarty_modifier_studlycaps($_smarty_tpl->tpl_vars['connection']->value->DBName);?>
::Model::DAO */

/** import supporting libraries */
require_once("verysimple/Phreeze/Phreezable.php");
require_once("<?php echo $_smarty_tpl->tpl_vars['singular']->value;?>
Map.php");

/**
 * <?php echo $_smarty_tpl->tpl_vars['singular']->value;?>
DAO provides object-oriented access to the <?php echo $_smarty_tpl->tpl_vars['table']->value->Name;?>
 table.  This
 * class is automatically generated by ClassBuilder.
 *
 * WARNING: THIS IS AN AUTO-GENERATED FILE
 *
 * This file should generally not be edited by hand except in special circumstances.
 * Add any custom business logic to the Model class which is extended from this DAO class.
 * Leaving this file alone will allow easy re-generation of all DAOs in the event of schema changes
 *
 * @package <?php echo smarty_modifier_studlycaps($_smarty_tpl->tpl_vars['connection']->value->DBName);?>
::Model::DAO
 * @author ClassBuilder
 * @version 1.0
 */
class <?php echo $_smarty_tpl->tpl_vars['singular']->value;?>
DAO extends Phreezable
{
<?php  $_smarty_tpl->tpl_vars['column'] = new Smarty_Variable; $_smarty_tpl->tpl_vars['column']->_loop = false;
 $_from = $_smarty_tpl->tpl_vars['table']->value->Columns; if (!is_array($_from) && !is_object($_from)) { settype($_from, 'array');}
foreach ($_from as $_smarty_tpl->tpl_vars['column']->key => $_smarty_tpl->tpl_vars['column']->value) {
$_smarty_tpl->tpl_vars['column']->_loop = true;
?>	/** @var <?php echo $_smarty_tpl->tpl_vars['column']->value->GetPhpType();?>
 */
	public $<?php echo smarty_modifier_studlycaps($_smarty_tpl->tpl_vars['column']->value->NameWithoutPrefix);?>
;

<?php } ?>

<?php  $_smarty_tpl->tpl_vars['set'] = new Smarty_Variable; $_smarty_tpl->tpl_vars['set']->_loop = false;
 $_from = $_smarty_tpl->tpl_vars['table']->value->Sets; if (!is_array($_from) && !is_object($_from)) { settype($_from, 'array');}
foreach ($_from as $_smarty_tpl->tpl_vars['set']->key => $_smarty_tpl->tpl_vars['set']->value) {
$_smarty_tpl->tpl_vars['set']->_loop = true;
?>	/**
	 * Returns a dataset of <?php echo smarty_modifier_studlycaps($_smarty_tpl->tpl_vars['set']->value->SetTableName);?>
 objects with matching <?php echo smarty_modifier_studlycaps($_smarty_tpl->tpl_vars['set']->value->SetKeyColumnNoPrefix);?>

	 * @param Criteria
	 * @return DataSet
	 */
	public function Get<?php echo smarty_modifier_studlycaps($_smarty_tpl->tpl_vars['set']->value->GetterName);?>
($criteria = null)
	{
		return $this->_phreezer->GetOneToMany($this, "<?php echo $_smarty_tpl->tpl_vars['set']->value->Name;?>
", $criteria);
	}

<?php } ?>
<?php  $_smarty_tpl->tpl_vars['constraint'] = new Smarty_Variable; $_smarty_tpl->tpl_vars['constraint']->_loop = false;
 $_from = $_smarty_tpl->tpl_vars['table']->value->Constraints; if (!is_array($_from) && !is_object($_from)) { settype($_from, 'array');}
foreach ($_from as $_smarty_tpl->tpl_vars['constraint']->key => $_smarty_tpl->tpl_vars['constraint']->value) {
$_smarty_tpl->tpl_vars['constraint']->_loop = true;
?>	/**
	 * Returns the foreign object based on the value of <?php echo smarty_modifier_studlycaps($_smarty_tpl->tpl_vars['constraint']->value->KeyColumnNoPrefix);?>

	 * @return <?php echo smarty_modifier_studlycaps($_smarty_tpl->tpl_vars['constraint']->value->ReferenceTableName);?>

	 */
	public function Get<?php echo smarty_modifier_studlycaps($_smarty_tpl->tpl_vars['constraint']->value->GetterName);?>
()
	{
		return $this->_phreezer->GetManyToOne($this, "<?php echo $_smarty_tpl->tpl_vars['constraint']->value->Name;?>
");
	}

<?php } ?>

}
?<?php ?>><?php }} ?>
